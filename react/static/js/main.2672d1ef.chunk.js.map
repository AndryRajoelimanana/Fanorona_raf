{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["create_board","my_pieces","opp_pieces","stones","Array","fill","my_pieces_binrepr","toString","padStart","opp_pieces_binrepr","my_len","length","opp_len","i","charAt","ToSquare","id","legalMove","boardstate","visited","must_capture","valid_move","last_move","possible_move","next_move","includes","len","last_selected","can_capture","push","movetype","MustCapture","has_moved","my_pieces_idx","reduce","a","e","concat","has_capture","App","props","componentDidUpdate","state","computer_move","setState","is_moving","wait_computer","restart_board","history","boardState","utils","selected","step_number","available_move","must_choose","status","undo_move","backStep","parseInt","unsetHistory","slice","new_pos","resetState","newboard","pass_game","was_capture","handle_opp_change","event","opponent","target","value","console","log","handle_movefirst","move_first","handle_depth","depth","onClick","capture_backward","capture_forward","getCurrentState","alert","newpos","direction","pos_eat","currentPlayer","map","item","width","height","move_log","states","current_params","selected_list","axios","post","then","res","data","movedict","prev_selected","eaten","j","setTimeout","iterate_move","catch","err","shift","board","this","computer_turn","winner","my_pieces_count","opp_pieces_count","className","Container","fluid","Row","noGutters","Col","xs","sm","md","Form","Group","as","controlId","Label","Control","onChange","movefirst","style","textAlign","React","Component","Stones","idbox","available","classname","stoneClasses","indexOf","MoveStatus","Board","RenderStones","stone","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2672d1ef.chunk.js","sourcesContent":["export function create_board(my_pieces, opp_pieces){\n    var stones = Array(50).fill('none');\n    var my_pieces_binrepr = (my_pieces).toString(2).padStart(64,'0');\n    var opp_pieces_binrepr = (opp_pieces).toString(2).padStart(64,'0');\n    var my_len = my_pieces_binrepr.length;\n    var opp_len = opp_pieces_binrepr.length;  \n    for (var i = 0; i < 50; i++) {\n      if (my_pieces_binrepr.charAt(my_len - i) === '1'){\n        stones[i] = 'one';\n      } else if (opp_pieces_binrepr.charAt(opp_len -i) === '1'){\n        stones[i] = 'two';\n      } else {\n        stones[i] = 'none';\n      }\n   }\n   return stones\n  }\n  \n\n\nexport function ToSquare(id) {\n    var column = 10 - (id % 10);\n    var row = ~~(id / 10);\n    var lookup = { \"0\":\"e\", \"1\":\"d\", \"2\":\"c\",\"3\":\"b\", \"4\":\"a\"};\n    return lookup[row]+column;\n}\n\n\nexport function legalMove(boardstate, id, visited, must_capture){\n\n  var possible_move =[];\n  var valid_move;\n  var last_move, last_id;\n  if ((id % 2) !== ((~~(id / 10)) % 2)) {\n    valid_move = [-11, -10, -9, -1, 1, 9, 10, 11];\n  } else{\n    valid_move = [-10, -1, 1, 10];\n  }\n  for (var i=0; i<valid_move.length; i++){\n    var next_move = id + valid_move[i];\n    if ((next_move % 10) === 0) {\n        continue;\n    }\n    if (((boardstate[next_move] === 'none') || (boardstate[next_move] === 'none eaten'))  && !(visited.includes(next_move))){\n        if (must_capture){\n            var len = visited.length;\n            if (len >1){\n                var last_selected = visited[len-2];\n                last_id = visited[len-1];\n                last_move = last_id - last_selected;    \n            } else{\n                last_move = 0;\n                last_id = 0;\n            }\n            if ((can_capture(boardstate, id, valid_move[i])) && (valid_move[i] !== last_move)) {\n                possible_move.push(next_move);\n            }\n        } else {\n            possible_move.push(id+valid_move[i]);\n        }\n      }\n    }\n  return possible_move;\n}\n\n\nexport function can_capture(boardstate, id, movetype){\n    return ((boardstate[id + 2*movetype] === 'two') || (boardstate[id - movetype] === 'two'))\n}\n\n\nexport function has_capture(boardstate){\n    const my_pieces_idx = boardstate.reduce((a, e, i) => (e === 'one') ? a.concat(i) : a, []);\n    var pmove;\n    var visited = [];\n    var hascapture = true;\n    for (var i=0; i<my_pieces_idx.length; i++){\n        pmove = legalMove(boardstate, my_pieces_idx[i], visited, hascapture);\n        if (pmove.length >=1){\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function makeMove_choosen(boardstate, selected, newpos){\n  var direction = newpos - selected;\n  var pos_eat = newpos;\n  while (boardstate[pos_eat] === 'two'){\n    boardstate[pos_eat] = 'none eaten';\n    pos_eat = pos_eat + direction;\n  } return boardstate;\n}\n\n\nexport function makeMove(boardstate, selected, newpos, movetype){\n    var direction;\n    var pos_eat, open_pos;\n    boardstate = boardstate.map(function(item) { return item === 'none eaten' ? 'none' : item; });\n    if (boardstate[selected + 2*movetype] === 'two'){\n        direction = movetype;\n        pos_eat = newpos + direction;\n    } else if (boardstate[selected - movetype] === 'two'){\n        direction = -movetype;\n        pos_eat = newpos + 2*direction;\n    }\n    boardstate[selected] = 'none';\n    boardstate[newpos] = 'one';\n    while (boardstate[pos_eat] === 'two'){\n        boardstate[pos_eat] = 'none eaten';\n        pos_eat = pos_eat + direction;\n    }\n    return boardstate;\n  }\n  \n\n  export function MustCapture(boardstate, has_moved){\n    var must_capture;\n    if (has_moved){\n      must_capture = true;\n    } else {\n      must_capture = has_capture(boardstate);\n    }\n    return must_capture;\n  }\n\n\n  export function is_winner(board){\n    let my_pieces_count = 0;\n    let opp_pieces_count = 0;\n    for (var i = 0; i<50; i++){\n      if (board[i] === 'one'){\n        ++my_pieces_count;\n      } else if (board[i] === 'two') {\n        ++opp_pieces_count;\n      }\n    }\n    if (my_pieces_count === 0){\n      return 'Computer WIN';\n    } else if (opp_pieces_count === 0){\n      return 'You WIN';\n    } else {\n      return null;\n    }\n  }\n","import React from 'react';\n// import {PathLine} from 'react-svg-pathline'\nimport './App.css';\nimport * as utils from './utils.js';\nimport axios from 'axios';\nimport { Container, Row, Col, Form} from 'react-bootstrap';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 100,\n      height: 100,\n      history: [{\n        boardState: utils.create_board(173538815, 562399469895680),\n      }],\n      selected: null,\n      step_number: 0,\n      has_moved: null,\n      available_move: [],\n      visited:[],\n      must_choose: [],\n      computer_move: false,\n      move_log:[],\n      states:[],\n      is_moving: false,\n      was_capture: false,\n      status: null,\n      opponent:'computer',\n      move_first:'human',\n      depth:3,\n    };\n  }\n\n\n  componentDidUpdate = () => {\n    if (this.state.computer_move) {\n      this.setState({is_moving: true});\n      this.wait_computer();\n    }\n  }\n\n  computer_turn(boardstate, was_capture, depth) {\n    let current_params = {'boardstate':boardstate, 'was_capture':was_capture, 'depth':depth};\n    //let history = this.state.history;\n    //let current_step = this.state.step_number;\n    // history = history.slice(0, current_step + 1);\n    let selected_list=[];\n    let states = [];\n    axios.post('/pass', current_params)\n    .then(res => {\n        let move_log = res.data[\"move_log\"];\n        let movedict = res.data['movedict'];\n        let selected;\n        let prev_selected = move_log[0];\n        for (var i=0; i<move_log.length; i++){\n          boardstate[prev_selected] = 'none';\n          selected = move_log[i];\n          boardstate[selected] = 'two';\n          boardstate = boardstate.map(function(item) { return item === 'none eaten' ? 'none' : item; });\n          var eaten = movedict[selected];\n          for (var j=0; j<eaten.length; j++){\n            boardstate[eaten[j]] = 'none eaten';\n          }\n          prev_selected = selected;\n          selected_list = selected_list.concat([prev_selected]);\n          states = states.concat([boardstate]);\n        }\n        this.setState({move_log: selected_list, states:states});\n        setTimeout(()=> {\n            this.iterate_move(selected_list, states);}, 1000);\n    })\n    .catch(err => {\n        alert(err);});\n    }\n  \n\n  iterate_move(move_log, states){\n    setTimeout(()=> {\n      let selected = move_log.shift();\n      let board = states.shift();\n      if (move_log.length === 0){\n        this.resetState(board);\n        this.setState({computer_move: false});\n        return\n      }\n      this.setState({history: this.state.history.concat([{\n        boardState: board,}]), selected: selected, step_number: this.state.history.length-1});\n      this.iterate_move(move_log, states)\n    }, 1000);\n  }\n\n  wait_computer(){\n    const board = this.getCurrentState();\n    var was_capture = this.state.was_capture;\n    var depth = this.state.depth;\n    this.computer_turn(board, was_capture, depth);\n    this.setState({computer_move: false, is_moving: false});\n  }\n\n\n  AImoves(){\n      const move_log = this.state.move_log;\n      const states = this.state.states;\n      this.iterate_move(move_log, states);\n  }\n\n\n  getCurrentState() {\n    var history = this.state.history;\n    var boardlist;\n    if (history.length > 1){\n      history = history.slice(0, this.state.step_number + 1);\n      boardlist = history[history.length - 1];\n    } else {\n      boardlist = history[0];\n    }\n    return boardlist.boardState;\n  }\n\n  restart_board = () => {\n    this.setState({\n      history: [{\n        boardState: utils.create_board(173538815, 562399469895680),\n      }],\n      selected: null,\n      step_number: 0,\n      has_moved: null,\n      available_move: [],\n      visited:[],\n      must_choose:[],\n      status: 'Human to move'\n    });\n  }\n  \n\n  undo_move = () => {\n    const backStep = parseInt(this.state.step_number, 10) -1;\n    if (backStep < 0) {\n        return;\n    }\n    const unsetHistory = this.state.history.slice(0, backStep+1);\n    this.setState({\n        history: unsetHistory,\n        selected: null,\n        available_move: [],\n        visited: [],\n        must_choose: [],\n        step_number: backStep,\n        new_pos: null,\n    });\n  }\n\n\n  resetState = (newboard) => {\n    this.setState({history: this.state.history.concat([{\n      boardState: newboard, }]),\n    selected: null, \n    computer_move: false,\n    available_move: [],\n    visited: [],\n    has_moved: false,\n    must_choose: [],\n    step_number: this.state.history.length,\n    status: 'Computer is moving',\n    });\n  }\n\n\n  pass_game = () => {\n    this.setState({was_capture: true, computer_move: true, status: 'Human to move'});\n  }\n\n  handle_opp_change = (event) =>{\n    this.setState({opponent: event.target.value});\n    console.log(this);\n  }\n\n  handle_movefirst = (event) =>{\n    this.setState({move_first: event.target.value});\n    console.log(this);\n  }\n  handle_depth = (event) =>{\n    this.setState({depth: event.target.value});\n    console.log(this);\n  }\n\n\n  onClick = (i) => {\n    if (this.state.computer_move){\n      return\n    }\n    // previous selection must choose direction\n    var must_choose = this.state.must_choose;\n    const selected = this.state.selected;\n    const boardstate = this.getCurrentState();\n    var visited = this.state.visited;\n    var movetype, possible_move, newboard, must_capture;\n    var capture_backward, capture_forward;\n    var has_moved = this.state.has_moved;\n    /* if no piece was selected:\n      - return if the next selected is not my_pieces\n      - else: check if the selected piece can move and return available move\n    */\n\n\n\n    if (must_choose.length > 1){\n      if (!(must_choose.includes(i))){\n        alert(\"you must choose\");\n        return\n      } else {\n        const new_pos = this.state.new_pos;\n        newboard = utils.makeMove_choosen(boardstate, selected, i)\n        newboard[selected] = 'none';\n        newboard[new_pos] = 'one';\n        visited = visited.push(new_pos);\n        must_capture = utils.MustCapture(newboard, true);\n        possible_move = utils.legalMove(boardstate, i, visited, must_capture);\n        if ((must_capture) && (possible_move  > 0)){\n          this.setState({history: this.state.history.concat([{\n            boardState: newboard, currentPlayer: true,}]),\n            must_choose: [], \n            selected: new_pos,\n            visited: visited});\n        } else{\n          this.resetState(newboard);\n          this.setState({was_capture: true, computer_move: true});\n          return;\n        }\n      }\n    }\n\n    must_capture = utils.MustCapture(boardstate, this.state.has_moved);\n\n    const available_move = this.state.available_move;\n    \n    // if clicked the selected piece twice undo selection\n    if ((selected === i) && (!(has_moved))) {\n      this.setState({selected: null, available_move: []});\n      return;\n    }\n    if ((selected) && (boardstate[i] === 'one') && (!(has_moved))){\n      possible_move = utils.legalMove(boardstate, i, visited, must_capture);\n      if (possible_move.length > 0){\n        this.setState({selected: i, available_move: possible_move});\n      } else {\n       return\n      }\n    }\n\n    \n    /* No pieces selected */\n    if (!(selected) && (! (this.state.computer_move))){\n      if (boardstate[i] !== 'one'){\n        return\n      } else {\n        possible_move = utils.legalMove(boardstate, i, visited, must_capture);\n        // if it can move mark it as selected and show available move\n        if (possible_move.length > 0){\n           this.setState({selected: i, available_move: possible_move});\n        } else{\n          return\n        }\n      }\n    }\n\n\n    if (available_move.includes(i)){\n      movetype = i - selected;\n      // Check if both forward and backward direction are possible\n      capture_forward = selected + 2*movetype;\n      capture_backward = selected - movetype;\n\n      if ((boardstate[capture_forward] ==='two') && (boardstate[capture_backward] ==='two')){\n        this.setState({must_choose: [capture_forward, capture_backward], new_pos:i});\n        alert('must choose');\n        return\n      }\n\n      newboard = utils.makeMove(boardstate, selected, i, movetype);\n      if (must_choose.length > 1){\n        this.setState({must_choose: [], selected: this.state.new_pos, new_pos: null});\n      }\n      if (!must_capture){\n        this.resetState(newboard);\n        this.setState({was_capture: false, computer_move: true});\n        return;\n        // this.resetState(result.boardstate);\n      }\n      if (!(has_moved)){\n        visited.push(selected);\n        visited.push(i);\n      } else {\n        visited.push(i);\n      }\n      possible_move = utils.legalMove(newboard, i, visited, must_capture);\n      if (possible_move.length>=1){\n        this.setState({history: this.state.history.concat([{\n          boardState: newboard, \n          currentPlayer: true,}]),\n        selected: i, \n        available_move: possible_move,\n        has_moved: true,\n        visited: visited,\n        must_choose: [],\n        step_number: this.state.history.length,});\n      } else{\n          this.resetState(newboard);\n          this.setState({was_capture: true, computer_move: true});\n          return;\n      }\n    }\n  }\n  \n\n  render() {\n    const boardstate = this.getCurrentState();\n    const selected = this.state.selected;\n    const available_move = this.state.available_move;\n    const winner = utils.is_winner(boardstate);\n    const must_choose = this.state.must_choose;\n    // const status = this.status;\n    if (winner){\n      alert(\"game over: \" + winner);\n      this.restart_board();\n    }\n    let status;\n    if (this.state.is_moving){\n      status = 'Computer is moving...';\n    } else if (must_choose.length){\n      status = 'Choose: '+utils.ToSquare(must_choose[0])+' or '+utils.ToSquare(must_choose[1]);\n    } else if (selected){\n      status = 'Piece selected: '+utils.ToSquare(selected);\n    } else {\n      status = 'Human to move';\n    }\n\n    return (\n      <div className='main'>\n        <Container fluid={true} id={'container1'}>\n          <Row noGutters={true}>\n            <Col xs={12} sm={12} md={8}>\n              <Form className='form_command'>\n                <Form.Row className=\"justify-content-md-center\"> \n                  <Form.Group as={Col} md=\"3\" xs=\"4\" controlId=\"opponent\">\n                    <Form.Label>Opponent</Form.Label>\n                    <Form.Control value={this.state.opponent} as=\"select\" onChange={this.handle_opp_change}>\n                        <option value=\"computer\">Computer</option>\n                        <option value=\"human\">Human</option>\n                    </Form.Control>\n                  </Form.Group>\n\n                  <Form.Group as={Col} md=\"3\"  xs=\"4\" controlId=\"move_first\">\n                    <Form.Label>Move First</Form.Label>\n                    <Form.Control value={this.state.movefirst} as=\"select\" onChange={this.handle_movefirst} >\n                      <option value=\"computer\">Computer</option>\n                      <option value=\"human\">Human</option>\n                    </Form.Control>\n                  </Form.Group>\n\n                  <Form.Group as={Col} md=\"3\"  xs=\"4\" controlId=\"depth\">\n                    <Form.Label>Depth</Form.Label>\n                    <Form.Control value={this.state.depth} as=\"select\"  onChange={this.handle_depth}>\n                      <option>1</option>\n                      <option>2</option>\n                      <option>3</option>\n                      <option>4</option>\n                      <option>5</option>\n                    </Form.Control>\n                  </Form.Group>\n                </Form.Row>\n              </Form>\n            </Col>\n          </Row>\n          <Row noGutters={true} className='windowa'>\n          <Col xs={12} sm={12} md={8}  className='game_windows row-eq-height'>\n            <div className='aspect_ratiodiv'>\n              <Container fluid={true} className='BoardCont' >\n                  <Row noGutters={true} className=\"crosscont\"  >\n                    <div className='aspect_ratiodiv1'>\n                    <Board\n                      boardstate={boardstate}\n                      selected = {selected}\n                      available_move = {available_move}\n                      onClick={i => this.onClick(i)}\n                    />\n                    </div>\n                  </Row>\n                  <Row noGutters={true} className=\"command_button\" >\n                      <Col style={{ textAlign: \"center\" }}>\n                        <button  className=\"game_button\"  onClick={() => this.restart_board()}>Restart</button>\n                      </Col>\n                      <Col style={{ textAlign: \"center\" }}>\n                        <button  className=\"game_button\"   onClick={() => this.pass_game()}>Pass</button>\n                      </Col>\n                      <Col style={{ textAlign: \"center\" }}>\n                        <button  className=\"game_button\"   onClick={() => this.undo_move()}>Undo</button>   \n                      </Col>\n                  </Row>\n                  \n              </Container>\n            </div>\n          </Col>\n          <Col xs={12} sm={12} md={4} className=\"status_window row-eq-height\">\n            <MoveStatus \n              status={status}\n              //move_table={move_table}\n            />\n\n          </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n};\n\n\nconst Stones = (props) => {\n  const id = props.id;\n  const idbox = utils.ToSquare(id);\n  const selected = props.selected;\n  const available = props.available;\n  var classname = \"player-\"+props.stoneClasses +' '+idbox;\n  if (id === selected){\n    classname = classname + '  selected';\n  }\n  if (available.indexOf(id) > -1) {\n    classname = classname + '  available';\n  }  \n  return (\n      <div className={classname}  id={id} onClick={props.onClick}>\n      </div>\n  );\n}\n\n\n\nclass MoveStatus extends React.Component {\n  render(){\n    const status = this.props.status;\n    return (\n      <div className=\"box_status\">\n      <Container fluid={true} className=\"status_show\">\n        {/* <Row noGutters={true} style={{fontWeight: 'bold'}}>Game Status</Row> */}\n        <h3>Game Status</h3>\n        <Row noGutters={true} className=\"game_status\">\n          <Col className=\"col-centered\" id=\"log_status\" >\n            <div className=\"center-me\" id=\"statusbox\"> {status}\n            </div>\n          </Col>\n        </Row>\n        {/* <Row noGutters={true} style={{fontWeight: 'bold'}}> Moves</Row>  */}\n        <h3>Moves</h3>\n        <Row noGutters={true} className=\"moves_log\">\n          <Col className=\"moves_tables\">\n            <div className=\"scrollbar-inner\" id=\"statusall\">\n\n              </div>\n          </Col>\n        </Row>              \n      </Container>\n    </div>\n    )\n}\n}\n\n\n// const ControlGame = () => {\n//   return (\n//     <Form className='form_command'>\n//       <Form.Row className=\"justify-content-md-center\"> \n//         <Form.Group as={Col} md=\"3\" xs=\"4\" controlId=\"opponent\">\n//           <Form.Label>Opponent</Form.Label>\n//           <Form.Control value={this.state.opponent} as=\"select\" onChange={this.handle_opp_change}>\n//               <option value=\"computer\">Computer</option>\n//               <option value=\"human\">Human</option>\n//           </Form.Control>\n//         </Form.Group>\n\n//         <Form.Group as={Col} md=\"3\"  xs=\"4\" controlId=\"move_first\">\n//           <Form.Label>Move First</Form.Label>\n//           <Form.Control value=\"human\" as=\"select\">\n//             <option value=\"computer\">Computer</option>\n//             <option value=\"human\">Human</option>\n//           </Form.Control>\n//         </Form.Group>\n\n//         <Form.Group as={Col} md=\"3\"  xs=\"4\" controlId=\"depth\">\n//           <Form.Label>Depth</Form.Label>\n//           <Form.Control value='3' as=\"select\">\n//             <option>1</option>\n//             <option>2</option>\n//             <option>3</option>\n//             <option>4</option>\n//             <option>5</option>\n//           </Form.Control>\n//         </Form.Group>\n//       </Form.Row>\n//     </Form>\n//   );\n// }\n\n\n\n\nclass Board extends React.Component {\n  RenderStones = (i) => {\n    const stone = this.props.boardstate[i];\n    const selected = this.props.selected;\n    const available = this.props.available_move;\n    return (\n      <Stones stoneClasses={stone} id={i} selected={selected}  available={available} onClick={() => this.props.onClick(i)}\n      />\n  );\n  }\n  render() {\n    return (\n      <div className=\"rowcross\" >\n        <div className='crossed'>\n          {this.RenderStones(49)}\n          {this.RenderStones(48)}\n          {this.RenderStones(39)}\n          {this.RenderStones(38)}\n          </div>\n        <div className='crossed'>\n          {this.RenderStones(47)}\n          {this.RenderStones(46)}\n          {this.RenderStones(37)}\n          {this.RenderStones(36)}\n          </div>\n        <div className='crossed'>\n          {this.RenderStones(45)}\n          {this.RenderStones(44)}\n          {this.RenderStones(35)}\n          {this.RenderStones(34)}\n          </div>\n        <div className='crossed_left'>\n          {this.RenderStones(43)}\n          {this.RenderStones(42)}\n          {this.RenderStones(41)}\n          {this.RenderStones(33)}\n          {this.RenderStones(32)}\n          {this.RenderStones(31)}\n          </div>\n        <div className='crossed_bottom'>\n          {this.RenderStones(29)}\n          {this.RenderStones(28)}\n          {this.RenderStones(19)}\n          {this.RenderStones(18)}\n          {this.RenderStones(9)}\n          {this.RenderStones(8)}\n          </div>\n        <div className='crossed_bottom'> \n          {this.RenderStones(27)}\n          {this.RenderStones(26)}\n          {this.RenderStones(17)}\n          {this.RenderStones(16)} \n          {this.RenderStones(7)}\n          {this.RenderStones(6)}                  \n          </div>\n        <div className='crossed_bottom'>\n          {this.RenderStones(25)}\n          {this.RenderStones(24)}\n          {this.RenderStones(15)}\n          {this.RenderStones(14)}\n          {this.RenderStones(5)}\n          {this.RenderStones(4)}          \n          </div>\n        <div className='crossed_bottom_left'>\n          {this.RenderStones(23)}\n          {this.RenderStones(22)}\n          {this.RenderStones(21)}\n          {this.RenderStones(13)}\n          {this.RenderStones(12)}\n          {this.RenderStones(11)}\n          {this.RenderStones(3)}\n          {this.RenderStones(2)}\n          {this.RenderStones(1)}\n          </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}