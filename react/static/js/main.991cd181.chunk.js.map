{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["create_board","my_pieces","opp_pieces","stones","Array","fill","my_pieces_binrepr","toString","padStart","opp_pieces_binrepr","my_len","length","opp_len","i","charAt","ToSquare","id","tomoveString","logm","movelog","legalMove","boardstate","visited","must_capture","valid_move","last_move","possible_move","next_move","includes","len","last_selected","can_capture","push","movetype","MustCapture","has_moved","my_pieces_idx","reduce","a","e","concat","has_capture","App","props","componentDidUpdate","state","computer_move","setState","is_moving","wait_computer","restart_board","history","boardState","utils","selected","step_number","available_move","must_choose","status","undo_move","backStep","parseInt","unsetHistory","slice","history_turn","turn_number","new_pos","resetState","newboard","move_string","turn","computer","turn_id","human","AppendHistory","pass_game","getCurrentState","was_capture","handle_opp_change","event","opponent","target","value","handle_movefirst","move_first","handle_depth","depth","onClick","capture_backward","capture_forward","alert","newpos","direction","Math","abs","pos_eat","currentPlayer","map","item","width","height","move_log","move_logback","states","current_params","selected_list","axios","post","then","res","data","movedict","prev_selected","eaten","j","setTimeout","iterate_move","catch","err","shift","board","this","computer_turn","winner","my_pieces_count","opp_pieces_count","new_history","hist_length","console","log","className","Container","fluid","Row","noGutters","Col","xs","sm","md","Form","Group","as","controlId","Label","Control","onChange","movefirst","style","textAlign","React","Component","Stones","idbox","available","classname","stoneClasses","indexOf","MoveStatus","index","key","border","borderCollapse","renderTableData","Board","RenderStones","stone","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.991cd181.chunk.js","sourcesContent":["export function create_board(my_pieces, opp_pieces){\n    var stones = Array(50).fill('none');\n    var my_pieces_binrepr = (my_pieces).toString(2).padStart(64,'0');\n    var opp_pieces_binrepr = (opp_pieces).toString(2).padStart(64,'0');\n    var my_len = my_pieces_binrepr.length;\n    var opp_len = opp_pieces_binrepr.length;  \n    for (var i = 0; i < 50; i++) {\n      if (my_pieces_binrepr.charAt(my_len - i) === '1'){\n        stones[i] = 'one';\n      } else if (opp_pieces_binrepr.charAt(opp_len -i) === '1'){\n        stones[i] = 'two';\n      } else {\n        stones[i] = 'none';\n      }\n   }\n   return stones\n  }\n  \n\n\nexport function ToSquare(id) {\n    var column = 10 - (id % 10);\n    var row = ~~(id / 10);\n    var lookup = { \"0\":\"e\", \"1\":\"d\", \"2\":\"c\",\"3\":\"b\", \"4\":\"a\"};\n    return lookup[row]+column;\n}\n\nexport function tomoveString(logm) {\n  for (var i = 0; i < logm.length; i++) {\n    if (i === 0){\n      var movelog = ToSquare(logm[i])\n    } else {\n      movelog = movelog +'-'+ToSquare(logm[i]);\n    }\n  }\n  return movelog;\n}\n\nexport function getTurn(history_turn){\n  let new_history=[];\n  let item;\n  const hist_length = history_turn.length;\n  for (var i = 0; i < hist_length; i++){\n    if ((i % 2) === 0){\n      new_history.push({turn:i/2+1, human:history_turn[i].human, computer:\" \"});\n    } else{\n      item = new_history[new_history.length -1]\n      item.computer= history_turn[i].human;\n    }\n  }\n  return new_history;\n}\n\n\nexport function legalMove(boardstate, id, visited, must_capture){\n\n  var possible_move =[];\n  var valid_move;\n  var last_move, last_id;\n  if ((id % 2) !== ((~~(id / 10)) % 2)) {\n    valid_move = [-11, -10, -9, -1, 1, 9, 10, 11];\n  } else{\n    valid_move = [-10, -1, 1, 10];\n  }\n  for (var i=0; i<valid_move.length; i++){\n    var next_move = id + valid_move[i];\n    if ((next_move % 10) === 0) {\n        continue;\n    }\n    if (((boardstate[next_move] === 'none') || (boardstate[next_move] === 'none eaten'))  && !(visited.includes(next_move))){\n        if (must_capture){\n            var len = visited.length;\n            if (len >1){\n                var last_selected = visited[len-2];\n                last_id = visited[len-1];\n                last_move = last_id - last_selected;    \n            } else{\n                last_move = 0;\n                last_id = 0;\n            }\n            if ((can_capture(boardstate, id, valid_move[i])) && (valid_move[i] !== last_move)) {\n                possible_move.push(next_move);\n            }\n        } else {\n            possible_move.push(id+valid_move[i]);\n        }\n      }\n    }\n  return possible_move;\n}\n\n\nexport function can_capture(boardstate, id, movetype){\n    return ((boardstate[id + 2*movetype] === 'two') || (boardstate[id - movetype] === 'two'))\n}\n\n\nexport function has_capture(boardstate){\n    const my_pieces_idx = boardstate.reduce((a, e, i) => (e === 'one') ? a.concat(i) : a, []);\n    var pmove;\n    var visited = [];\n    var hascapture = true;\n    for (var i=0; i<my_pieces_idx.length; i++){\n        pmove = legalMove(boardstate, my_pieces_idx[i], visited, hascapture);\n        if (pmove.length >=1){\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function makeMove_choosen(boardstate, selected, newpos){\n  var direction = newpos - selected;\n  if ((direction % 2 === 0) && (Math.abs(direction) !== 10)){\n    direction = direction/2;\n  }\n  var pos_eat = newpos;\n  while (boardstate[pos_eat] === 'two'){\n    boardstate[pos_eat] = 'none eaten';\n    pos_eat = pos_eat + direction;\n  } return boardstate;\n}\n\n\nexport function makeMove(boardstate, selected, newpos, movetype){\n    var direction;\n    var pos_eat;\n    boardstate = boardstate.map(function(item) { return item === 'none eaten' ? 'none' : item; });\n    if (boardstate[selected + 2*movetype] === 'two'){\n        direction = movetype;\n        pos_eat = newpos + direction;\n    } else if (boardstate[selected - movetype] === 'two'){\n        direction = -movetype;\n        pos_eat = newpos + 2*direction;\n    }\n    boardstate[selected] = 'none';\n    boardstate[newpos] = 'one';\n    while (boardstate[pos_eat] === 'two'){\n        boardstate[pos_eat] = 'none eaten';\n        pos_eat = pos_eat + direction;\n    }\n    return boardstate;\n  }\n  \n\n  export function MustCapture(boardstate, has_moved){\n    var must_capture;\n    if (has_moved){\n      must_capture = true;\n    } else {\n      must_capture = has_capture(boardstate);\n    }\n    return must_capture;\n  }\n\n\n  export function is_winner(board){\n    let my_pieces_count = 0;\n    let opp_pieces_count = 0;\n    for (var i = 0; i<50; i++){\n      if (board[i] === 'one'){\n        ++my_pieces_count;\n      } else if (board[i] === 'two') {\n        ++opp_pieces_count;\n      }\n    }\n    if (my_pieces_count === 0){\n      return 'Computer WIN';\n    } else if (opp_pieces_count === 0){\n      return 'You WIN';\n    } else {\n      return null;\n    }\n  }\n","import React from 'react';\n// import {PathLine} from 'react-svg-pathline'\nimport './App.css';\nimport * as utils from './utils.js';\nimport axios from 'axios';\nimport { Container, Row, Col, Form} from 'react-bootstrap';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 100,\n      height: 100,\n      history: [{\n        boardState: utils.create_board(173538815, 562399469895680),\n      }],\n      selected: null,\n      step_number: 0,\n      has_moved: null,\n      available_move: [],\n      visited:[],\n      must_choose: [],\n      computer_move: false,\n      move_log:[],\n      move_logback:[],\n      states:[],\n      is_moving: false,\n      was_capture: false,\n      status: null,\n      opponent:'computer',\n      move_first:'human',\n      depth:3,\n      move_string: [],\n      history_turn: [{\n        boardState: [],\n        turn_id: 0,\n        human:'',\n        computer:'',\n      }],\n      turn_number: 0,\n    };\n  }\n\n\n  componentDidUpdate = () => {\n    if (this.state.computer_move) {\n      this.setState({is_moving: true});\n      this.wait_computer();\n      this.setState({computer_move: false, is_moving: false});\n      //console.log(this);\n    }\n  }\n\n\n  computer_turn(boardstate, was_capture, depth) {\n    let current_params = {'boardstate':boardstate, 'was_capture':was_capture, 'depth':depth};\n    //let history = this.state.history;\n    //let current_step = this.state.step_number;\n    // history = history.slice(0, current_step + 1);\n    let selected_list=[];\n    let states = [];\n    axios.post('/pass', current_params)\n    .then(res => {\n        let move_log = res.data[\"move_log\"];\n        let movedict = res.data['movedict'];\n        let selected;\n        let prev_selected = move_log[0];\n        for (var i=0; i<move_log.length; i++){\n          boardstate[prev_selected] = 'none';\n          selected = move_log[i];\n          boardstate[selected] = 'two';\n          boardstate = boardstate.map(function(item) { return item === 'none eaten' ? 'none' : item; });\n          var eaten = movedict[selected];\n          for (var j=0; j<eaten.length; j++){\n            boardstate[eaten[j]] = 'none eaten';\n          }\n          prev_selected = selected;\n          selected_list = selected_list.concat([prev_selected]);\n          states = states.concat([boardstate]);\n        }\n        this.setState({move_log: selected_list, move_logback:selected_list, states:states});\n        setTimeout(()=> {\n            this.iterate_move(selected_list, states);}, 1000);\n    })\n    .catch(err => {\n        alert(err);});\n    }\n  \n\n  iterate_move(move_log, states){\n    setTimeout(()=> {\n      let selected = move_log.shift();\n      let board = states.shift();\n      let visited = this.state.visited;\n      if (move_log.length === 0){\n        visited.push(selected);\n        this.resetState(board);\n        this.setState({computer_move: false, visited: []});\n        return\n      }\n      visited.push(selected);\n      this.setState({history: this.state.history.concat([{\n        boardState: board,}]), selected: selected, step_number: this.state.history.length-1, visited: visited});\n      this.iterate_move(move_log, states)\n    }, 1000);\n  }\n\n  wait_computer(){\n    const board = this.getCurrentState();\n    var was_capture = this.state.was_capture;\n    var depth = this.state.depth;\n    this.computer_turn(board, was_capture, depth);\n  }\n\n\n  AImoves(){\n      const move_log = this.state.move_log;\n      const states = this.state.states;\n      this.iterate_move(move_log, states);\n  }\n\n\n  getCurrentState() {\n    var history = this.state.history;\n    var boardlist;\n    if (history.length > 1){\n      history = history.slice(0, this.state.step_number + 1);\n      boardlist = history[history.length - 1];\n    } else {\n      boardlist = history[0];\n    }\n    return boardlist.boardState;\n  }\n\n  AppendHistory(history) {\n    var history_turn = this.state.history_turn;\n    return history_turn.concat([history])\n  }\n\n\n\n  restart_board = () => {\n    this.setState({\n      history: [{\n        boardState: utils.create_board(173538815, 562399469895680),\n      }],\n      selected: null,\n      step_number: 0,\n      has_moved: null,\n      available_move: [],\n      must_choose:[],\n      status: 'Human to move',\n    });\n  }\n  \n\n  undo_move = () => {\n    const backStep = parseInt(this.state.step_number, 10) -1;\n    if (backStep < 0) {\n        return;\n    }\n    const unsetHistory = this.state.history.slice(0, backStep+1);\n    unsetHistory[unsetHistory.length-1].boardState = this.state.history_turn[this.state.turn_number-1].boardState; \n    this.setState({\n        history: unsetHistory,\n        selected: null,\n        available_move: [],\n        visited: [],\n        must_choose: [],\n        new_pos: null,\n        turn_number: this.state.turn_number-1\n    });\n  }\n\n\n  resetState = (newboard) => {\n    var visited = this.state.visited;\n    let move_string = utils.tomoveString(visited);\n    let turn = this.state.turn_number;\n    if (this.state.is_moving){\n      var history_turn = this.state.history_turn;\n      history_turn[turn].computer = move_string;\n    } else{\n      turn = turn + 1;\n      var history = {boardState: newboard, turn_id: turn, human:move_string, computer:''};\n      var history_turn = this.AppendHistory(history);\n    }\n    \n    this.setState({history: this.state.history.concat([{\n      boardState: newboard, }]),\n    selected: null, \n    computer_move: false,\n    available_move: [],\n    visited: [],\n    has_moved: false,\n    must_choose: [],\n    step_number: this.state.history.length,\n    status: 'Computer is moving',\n    history_turn: history_turn ,\n    turn_number: turn,\n    });\n  }\n\n\n  pass_game = () => {\n    if (!(this.state.has_moved)){\n      return;\n    }\n    var visited = this.state.visited;\n    let move_string = utils.tomoveString(visited);\n    var turn = this.state.turn_number + 1;\n    var newboard = this.getCurrentState();\n    var history = {boardState: newboard, turn_id: turn, human:move_string, computer:''};\n\n    this.setState({was_capture: true, computer_move: true, \n      selected: null, status: 'Computer is moving',\n      available_move: [],\n      visited: [],\n      has_moved: false,\n      must_choose: [],\n      history_turn: this.AppendHistory(history),\n      turn_number: turn,\n    });\n  }\n\n  handle_opp_change = (event) =>{\n    this.setState({opponent: event.target.value});\n  }\n\n  handle_movefirst = (event) =>{\n    this.setState({move_first: event.target.value});\n\n  }\n  handle_depth = (event) =>{\n    this.setState({depth: event.target.value});\n  }\n\n\n  onClick = (i) => {\n    if (this.state.computer_move){\n      return\n    }\n    // previous selection must choose direction\n    var must_choose = this.state.must_choose;\n    const selected = this.state.selected;\n    const boardstate = this.getCurrentState();\n    var visited = this.state.visited;\n    var movetype, possible_move, newboard, must_capture;\n    var capture_backward, capture_forward;\n    var has_moved = this.state.has_moved;\n    /* if no piece was selected:\n      - return if the next selected is not my_pieces\n      - else: check if the selected piece can move and return available move\n    */\n\n\n\n    if (must_choose.length > 1){\n      if (!(must_choose.includes(i))){\n        alert(\"you must choose\");\n        return\n      } else {\n        const new_pos = this.state.new_pos;\n        newboard = utils.makeMove_choosen(boardstate, selected, i)\n        newboard[selected] = 'none';\n        newboard[new_pos] = 'one';\n        if (!(has_moved)){\n          visited.push(selected);\n        }\n        visited.push(new_pos);\n        must_capture = utils.MustCapture(newboard, true);\n        possible_move = utils.legalMove(boardstate, i, visited, must_capture);\n        if ((must_capture) && (possible_move  > 0)){\n          this.setState({history: this.state.history.concat([{\n            boardState: newboard, currentPlayer: true,}]),\n            must_choose: [], \n            selected: new_pos,\n            visited: visited,\n            has_moved: true});\n        } else{\n          this.resetState(newboard);\n          this.setState({was_capture: true, computer_move: true, visited: []});\n          return;\n        }\n      }\n    }\n\n    must_capture = utils.MustCapture(boardstate, this.state.has_moved);\n\n    const available_move = this.state.available_move;\n    \n    // if clicked the selected piece twice undo selection\n    if ((selected === i) && (!(has_moved))) {\n      this.setState({selected: null, available_move: []});\n      return;\n    }\n    if ((selected) && (boardstate[i] === 'one') && (!(has_moved))){\n      possible_move = utils.legalMove(boardstate, i, visited, must_capture);\n      if (possible_move.length > 0){\n        this.setState({selected: i, available_move: possible_move});\n      } else {\n       return\n      }\n    }\n\n    \n    /* No pieces selected */\n    if (!(selected) && (! (this.state.computer_move))){\n      if (boardstate[i] !== 'one'){\n        return\n      } else {\n        possible_move = utils.legalMove(boardstate, i, visited, must_capture);\n        // if it can move mark it as selected and show available move\n        if (possible_move.length > 0){\n           this.setState({selected: i, available_move: possible_move});\n        } else{\n          return\n        }\n      }\n    }\n\n\n    if (available_move.includes(i)){\n      movetype = i - selected;\n      // Check if both forward and backward direction are possible\n      capture_forward = selected + 2*movetype;\n      capture_backward = selected - movetype;\n\n      if ((boardstate[capture_forward] ==='two') && (boardstate[capture_backward] ==='two')){\n        this.setState({must_choose: [capture_forward, capture_backward], new_pos:i});\n        alert('must choose');\n        return\n      }\n\n      newboard = utils.makeMove(boardstate, selected, i, movetype);\n      if (!(has_moved)){\n        visited.push(selected);\n      }\n      visited.push(i);\n      \n      if (!must_capture){\n        this.resetState(newboard);\n        this.setState({was_capture: false, computer_move: true, visited: []});\n        return;\n        // this.resetState(result.boardstate);\n      }\n\n      \n      possible_move = utils.legalMove(newboard, i, visited, must_capture);\n      if (possible_move.length>=1){\n        this.setState({history: this.state.history.concat([{\n          boardState: newboard, \n          currentPlayer: true,}]),\n        selected: i, \n        available_move: possible_move,\n        has_moved: true,\n        visited: visited,\n        must_choose: [],\n        step_number: this.state.history.length,});\n      } else{\n          this.resetState(newboard);\n          this.setState({was_capture: true, computer_move: true, visited: []});\n          return;\n      }\n    }\n  }\n  \n\n  render() {\n    const boardstate = this.getCurrentState();\n    const selected = this.state.selected;\n    const available_move = this.state.available_move;\n    const winner = utils.is_winner(boardstate);\n    const must_choose = this.state.must_choose;\n    // const status = this.status;\n    if (winner){\n      alert(\"game over: \" + winner);\n      this.restart_board();\n    }\n    let status;\n    if (this.state.is_moving){\n      status = 'Computer is moving...';\n    } else if (must_choose.length){\n      status = 'Choose: '+utils.ToSquare(must_choose[0])+' or '+utils.ToSquare(must_choose[1]);\n    } else if (selected){\n      status = 'Piece selected: '+utils.ToSquare(selected);\n    } else {\n      status = 'Human to move';\n    }\n    const hist_in = this.state.history_turn.slice(1);\n    let new_history = utils.getTurn(hist_in);\n    console.log(new_history);\n    console.log(this);\n\n    return (\n      <div className='main'>\n        <Container fluid={true} id={'container1'}>\n          <Row noGutters={true}>\n            <Col xs={12} sm={12} md={8}>\n              <Form className='form_command'>\n                <Form.Row className=\"justify-content-md-center\"> \n                  <Form.Group as={Col} md=\"3\" xs=\"4\" controlId=\"opponent\">\n                    <Form.Label>Opponent</Form.Label>\n                    <Form.Control value={this.state.opponent} as=\"select\" onChange={this.handle_opp_change}>\n                        <option value=\"computer\">Computer</option>\n                        <option value=\"human\">Human</option>\n                    </Form.Control>\n                  </Form.Group>\n\n                  <Form.Group as={Col} md=\"3\"  xs=\"4\" controlId=\"move_first\">\n                    <Form.Label>Move First</Form.Label>\n                    <Form.Control value={this.state.movefirst} as=\"select\" onChange={this.handle_movefirst} >\n                      <option value=\"computer\">Computer</option>\n                      <option value=\"human\">Human</option>\n                    </Form.Control>\n                  </Form.Group>\n\n                  <Form.Group as={Col} md=\"3\"  xs=\"4\" controlId=\"depth\">\n                    <Form.Label>Depth</Form.Label>\n                    <Form.Control value={this.state.depth} as=\"select\"  onChange={this.handle_depth}>\n                      <option>1</option>\n                      <option>2</option>\n                      <option>3</option>\n                      <option>4</option>\n                      <option>5</option>\n                    </Form.Control>\n                  </Form.Group>\n                </Form.Row>\n              </Form>\n            </Col>\n          </Row>\n          <Row noGutters={true} className='windowa'>\n          <Col xs={12} sm={12} md={8}  className='game_windows row-eq-height'>\n            <div className='aspect_ratiodiv'>\n              <Container fluid={true} className='BoardCont' >\n                  <Row noGutters={true} className=\"crosscont\"  >\n                    <div className='aspect_ratiodiv1'>\n                    <Board\n                      boardstate={boardstate}\n                      selected = {selected}\n                      available_move = {available_move}\n                      onClick={i => this.onClick(i)}\n                    />\n                    </div>\n                  </Row>\n                  <Row noGutters={true} className=\"command_button\" >\n                      <Col style={{ textAlign: \"center\" }}>\n                        <button  className=\"game_button\"  onClick={() => this.restart_board()}>Restart</button>\n                      </Col>\n                      <Col style={{ textAlign: \"center\" }}>\n                        <button  className=\"game_button\"   onClick={() => this.pass_game()}>Pass</button>\n                      </Col>\n                      <Col style={{ textAlign: \"center\" }}>\n                        <button  className=\"game_button\"   onClick={() => this.undo_move()}>Undo</button>   \n                      </Col>\n                  </Row>\n                  \n              </Container>\n            </div>\n          </Col>\n          <Col xs={12} sm={12} md={4} className=\"status_window row-eq-height\">\n            <MoveStatus \n              status={status} move_string={new_history}\n              //move_table={move_table}\n            />\n\n          </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n};\n\n\nconst Stones = (props) => {\n  const id = props.id;\n  const idbox = utils.ToSquare(id);\n  const selected = props.selected;\n  const available = props.available;\n  var classname = \"player-\"+props.stoneClasses +' '+idbox;\n  if (id === selected){\n    classname = classname + '  selected';\n  }\n  if (available.indexOf(id) > -1) {\n    classname = classname + '  available';\n  }  \n  return (\n      <div className={classname}  id={id} onClick={props.onClick}>\n      </div>\n  );\n}\n\n\n\nclass MoveStatus extends React.Component {\n  renderTableData() {\n    const move_str = this.props.move_string;\n    // console.log('movestring');\n    // console.log(move_str);\n    return move_str.map((history, index) => {\n        const {turn, human, computer } = history //destructuring\n        return (\n          <tr key={turn}>\n             <td style={{textAlign:'center'}}>{turn}</td>\n             <td>{human}</td>\n             <td>{computer}</td>\n          </tr>\n        )\n    })\n }\n  render(){\n    const status = this.props.status;\n    return (\n      <div className=\"box_status\">\n      <Container fluid={true} className=\"status_show\">\n        {/* <Row noGutters={true} style={{fontWeight: 'bold'}}>Game Status</Row> */}\n        <h3>Game Status</h3>\n        <Row noGutters={true} className=\"game_status\">\n          <Col className=\"col-centered\" id=\"log_status\" >\n            <div className=\"center-me\" id=\"statusbox\"> {status}\n            </div>\n          </Col>\n        </Row>\n        {/* <Row noGutters={true} style={{fontWeight: 'bold'}}> Moves</Row>  */}\n        <h3>Moves</h3>\n        <Row noGutters={true} className=\"moves_log\">\n          <Col className=\"moves_tables\">\n            <div id=\"statusall\">\n              <table id='moves' style={{width:'100%'}}>\n                <tbody>\n                  <tr style={{border:'1px dashed', borderCollapse:'collapse' }}>\n                    <th width=\"20%\" style={{textAlign:'center'}}>ID</th>\n                    <th width=\"40%\">Human</th>\n                    <th width=\"40%\">Computer</th>\n                  </tr>\n                    {this.renderTableData()}\n                </tbody>\n              </table>\n            </div>\n          </Col>\n        </Row>              \n      </Container>\n    </div>\n    )\n}\n}\n\n\n\nclass Board extends React.Component {\n  RenderStones = (i) => {\n    const stone = this.props.boardstate[i];\n    const selected = this.props.selected;\n    const available = this.props.available_move;\n    return (\n      <Stones stoneClasses={stone} id={i} selected={selected}  available={available} onClick={() => this.props.onClick(i)}\n      />\n  );\n  }\n  render() {\n    return (\n      <div className=\"rowcross\" >\n        <div className='crossed'>\n          {this.RenderStones(49)}\n          {this.RenderStones(48)}\n          {this.RenderStones(39)}\n          {this.RenderStones(38)}\n          </div>\n        <div className='crossed'>\n          {this.RenderStones(47)}\n          {this.RenderStones(46)}\n          {this.RenderStones(37)}\n          {this.RenderStones(36)}\n          </div>\n        <div className='crossed'>\n          {this.RenderStones(45)}\n          {this.RenderStones(44)}\n          {this.RenderStones(35)}\n          {this.RenderStones(34)}\n          </div>\n        <div className='crossed_left'>\n          {this.RenderStones(43)}\n          {this.RenderStones(42)}\n          {this.RenderStones(41)}\n          {this.RenderStones(33)}\n          {this.RenderStones(32)}\n          {this.RenderStones(31)}\n          </div>\n        <div className='crossed_bottom'>\n          {this.RenderStones(29)}\n          {this.RenderStones(28)}\n          {this.RenderStones(19)}\n          {this.RenderStones(18)}\n          {this.RenderStones(9)}\n          {this.RenderStones(8)}\n          </div>\n        <div className='crossed_bottom'> \n          {this.RenderStones(27)}\n          {this.RenderStones(26)}\n          {this.RenderStones(17)}\n          {this.RenderStones(16)} \n          {this.RenderStones(7)}\n          {this.RenderStones(6)}                  \n          </div>\n        <div className='crossed_bottom'>\n          {this.RenderStones(25)}\n          {this.RenderStones(24)}\n          {this.RenderStones(15)}\n          {this.RenderStones(14)}\n          {this.RenderStones(5)}\n          {this.RenderStones(4)}          \n          </div>\n        <div className='crossed_bottom_left'>\n          {this.RenderStones(23)}\n          {this.RenderStones(22)}\n          {this.RenderStones(21)}\n          {this.RenderStones(13)}\n          {this.RenderStones(12)}\n          {this.RenderStones(11)}\n          {this.RenderStones(3)}\n          {this.RenderStones(2)}\n          {this.RenderStones(1)}\n          </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}