{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["create_board","my_pieces","opp_pieces","stones","Array","fill","my_pieces_binrepr","toString","padStart","opp_pieces_binrepr","my_len","length","opp_len","i","charAt","ToSquare","id","tomoveString","logm","movelog","legalMove","boardstate","visited","must_capture","valid_move","last_move","possible_move","next_move","includes","len","last_selected","can_capture","push","movetype","MustCapture","has_moved","my_pieces_idx","reduce","a","e","concat","has_capture","get_board","gametype","board","App","props","restart_board","setState","baseState","restart_board1","history","boardState","utils","history_turn","turn_id","human","computer","selected","step_number","available_move","must_choose","status","move_string","turn_number","componentDidUpdate","state","computer_move","is_moving","wait_computer","undo_move","prev_step","unsetHistory","prev_hist_turn","currTurn","slice","new_pos","resetState","newboard","turn","AppendHistory","game_type","pass_game","getCurrentState","was_capture","handle_game_type","event","target","value","handle_move_first","move_first","handle_depth","depth","onClick","capture_backward","capture_forward","newpos","direction","pos_eat","map","item","currentPlayer","alert","width","height","move_log","move_logback","states","current_params","selected_list","axios","post","then","res","data","movedict","prev_selected","eaten","j","setTimeout","iterate_move","catch","err","shift","this","computer_turn","winner","my_pieces_count","opp_pieces_count","new_history","hist_length","disabled_game","className","Container","fluid","Row","noGutters","Col","xs","sm","md","Form","Group","as","controlId","Label","Control","onChange","disabled","style","textAlign","React","Component","Stones","idbox","available","classname","stoneClasses","indexOf","MoveStatus","index","key","borderBottom","borderCollapse","renderTableData","Board","RenderStones","stone","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4e80b1a.chunk.js","sourcesContent":["export function create_board(my_pieces, opp_pieces){\n    var stones = Array(50).fill('none');\n    var my_pieces_binrepr = (my_pieces).toString(2).padStart(64,'0');\n    var opp_pieces_binrepr = (opp_pieces).toString(2).padStart(64,'0');\n    var my_len = my_pieces_binrepr.length;\n    var opp_len = opp_pieces_binrepr.length;  \n    for (var i = 0; i < 50; i++) {\n      if (my_pieces_binrepr.charAt(my_len - i) === '1'){\n        stones[i] = 'one';\n      } else if (opp_pieces_binrepr.charAt(opp_len -i) === '1'){\n        stones[i] = 'two';\n      } else {\n        stones[i] = 'none';\n      }\n   }\n   return stones\n  }\n  \n\n\nexport function ToSquare(id) {\n    var column = 10 - (id % 10);\n    var row = ~~(id / 10);\n    var lookup = { \"0\":\"e\", \"1\":\"d\", \"2\":\"c\",\"3\":\"b\", \"4\":\"a\"};\n    return lookup[row]+column;\n}\n\nexport function tomoveString(logm) {\n  for (var i = 0; i < logm.length; i++) {\n    if (i === 0){\n      var movelog = ToSquare(logm[i])\n    } else {\n      movelog = movelog +'-'+ToSquare(logm[i]);\n    }\n  }\n  return movelog;\n}\n\nexport function getTurn(history_turn){\n  let new_history=[];\n  let item;\n  const hist_length = history_turn.length;\n  for (var i = 0; i < hist_length; i++){\n    if ((i % 2) === 0){\n      new_history.push({turn:i/2+1, human:history_turn[i].human, computer:\" \"});\n    } else{\n      item = new_history[new_history.length -1]\n      item.computer= history_turn[i].human;\n    }\n  }\n  return new_history;\n}\n\n\nexport function legalMove(boardstate, id, visited, must_capture){\n\n  var possible_move =[];\n  var valid_move;\n  var last_move, last_id;\n  if ((id % 2) !== ((~~(id / 10)) % 2)) {\n    valid_move = [-11, -10, -9, -1, 1, 9, 10, 11];\n  } else{\n    valid_move = [-10, -1, 1, 10];\n  }\n  for (var i=0; i<valid_move.length; i++){\n    var next_move = id + valid_move[i];\n    if ((next_move % 10) === 0) {\n        continue;\n    }\n    if (((boardstate[next_move] === 'none') || (boardstate[next_move] === 'none eaten'))  && !(visited.includes(next_move))){\n        if (must_capture){\n            var len = visited.length;\n            if (len >1){\n                var last_selected = visited[len-2];\n                last_id = visited[len-1];\n                last_move = last_id - last_selected;    \n            } else{\n                last_move = 0;\n                last_id = 0;\n            }\n            if ((can_capture(boardstate, id, valid_move[i])) && (valid_move[i] !== last_move)) {\n                possible_move.push(next_move);\n            }\n        } else {\n            possible_move.push(id+valid_move[i]);\n        }\n      }\n    }\n  return possible_move;\n}\n\n\nexport function can_capture(boardstate, id, movetype){\n    return ((boardstate[id + 2*movetype] === 'two') || (boardstate[id - movetype] === 'two'))\n}\n\n\nexport function has_capture(boardstate){\n    const my_pieces_idx = boardstate.reduce((a, e, i) => (e === 'one') ? a.concat(i) : a, []);\n    var pmove;\n    var visited = [];\n    var hascapture = true;\n    for (var i=0; i<my_pieces_idx.length; i++){\n        pmove = legalMove(boardstate, my_pieces_idx[i], visited, hascapture);\n        if (pmove.length >=1){\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport function makeMove_choosen(boardstate, selected, newpos, i){\n  var movetype = newpos - selected;\n  var direction, pos_eat;\n  boardstate = boardstate.map(function(item) { return item === 'none eaten' ? 'none' : item; });\n  if ((selected + 2*movetype) === i){\n    direction = movetype;\n    pos_eat = newpos + direction;\n  } else if ((selected - movetype) === i){\n    direction = -movetype;\n    pos_eat = newpos + 2*direction;\n  }\n  boardstate[selected] = 'none';\n  boardstate[newpos] = 'one';\n  while (boardstate[pos_eat] === 'two'){\n      boardstate[pos_eat] = 'none eaten';\n      pos_eat = pos_eat + direction;\n  }\n  return boardstate;\n}\n\n\n\nexport function makeMove(boardstate, selected, newpos, movetype){\n    var direction;\n    var pos_eat;\n    boardstate = boardstate.map(function(item) { return item === 'none eaten' ? 'none' : item; });\n    if (boardstate[selected + 2*movetype] === 'two'){\n        direction = movetype;\n        pos_eat = newpos + direction;\n    } else if (boardstate[selected - movetype] === 'two'){\n        direction = -movetype;\n        pos_eat = newpos + 2*direction;\n    }\n    boardstate[selected] = 'none';\n    boardstate[newpos] = 'one';\n    while (boardstate[pos_eat] === 'two'){\n        boardstate[pos_eat] = 'none eaten';\n        pos_eat = pos_eat + direction;\n    }\n    return boardstate;\n  }\n  \n\n  export function MustCapture(boardstate, has_moved){\n    var must_capture;\n    if (has_moved){\n      must_capture = true;\n    } else {\n      must_capture = has_capture(boardstate);\n    }\n    return must_capture;\n  }\n\n\n  export function is_winner(board){\n    let my_pieces_count = 0;\n    let opp_pieces_count = 0;\n    for (var i = 0; i<50; i++){\n      if (board[i] === 'one'){\n        ++my_pieces_count;\n      } else if (board[i] === 'two') {\n        ++opp_pieces_count;\n      }\n    }\n    if (my_pieces_count === 0){\n      return 'Computer WIN';\n    } else if (opp_pieces_count === 0){\n      return 'You WIN';\n    } else {\n      return null;\n    }\n  }\n\n  export  function get_board(gametype){\n    let board;\n    if (gametype === 'vakyloha'){\n      board = [\"none\",\"one\",\"one\",\"one\",\"one\",\"none eaten\",\"one\",\"one\",\"one\",\"one\",\n        \"none\",\"one\",\"one\",\"one\",\"one\",\"none eaten\",\"one\",\"one\",\"one\",\"one\",\n        \"none\",\"one\",\"two\",\"one\",\"two\",\"two\",\"one\",\"two\",\"one\",\"two\",\n        \"none\",\"two\",\"two\",\"two\",\"two\",\"none\",\"two\",\"two\",\"two\",\"two\",\n        \"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\"];\n    } else if (gametype === 'kobana') {\n      board = [ \"none\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\n                \"none\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\n                \"none\",\"one\",\"two\",\"none eaten\",\"none\",\"two\",\"one\",\"two\",\"one\",\"two\",\n                \"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\n                \"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\"\n                ];\n    } else if (gametype === 'fohy') {\n      board = [ \"none\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\n                \"none\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\n                \"none\",\"one\",\"two\",\"one\",\"none\",\"two\",\"none eaten\",\"two\",\"one\",\"two\",\n                \"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\n                \"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\"\n                ];\n    } else if (gametype === 'havia') {\n      board = [ \"none\",\"one\",\"one\",\"none eaten\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\n                \"none\",\"one\",\"one\",\"one\",\"none eaten\",\"one\",\"one\",\"one\",\"one\",\"one\",\n                \"none\",\"one\",\"two\",\"one\",\"two\",\"two\",\"one\",\"two\",\"one\",\"two\",\n                \"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\"none\",\"two\",\"two\",\"two\",\n                \"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\"\n                ];      \n    } else if (gametype === 'havanana'){\n      board = [ \"none\",\"one\",\"one\",\"one\",\"one\",\"one\",\"one\",\"none eaten\",\"one\",\"one\",\n                \"none\",\"one\",\"one\",\"one\",\"one\",\"one\",\"none eaten\",\"one\",\"one\",\"one\",\n                \"none\",\"one\",\"two\",\"one\",\"two\",\"two\",\"one\",\"two\",\"one\",\"two\",\n                \"none\",\"two\",\"two\",\"two\",\"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\n                \"none\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\",\"two\"\n                ];      \n    }\n    return board;\n  }","import React from 'react';\n// import {PathLine} from 'react-svg-pathline'\nimport './App.css';\nimport * as utils from './utils.js';\nimport axios from 'axios';\nimport { Container, Row, Col, Form} from 'react-bootstrap';\nimport { breakStatement } from '@babel/types';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 100,\n      height: 100,\n      history: [{\n        boardState: utils.create_board(173538815, 562399469895680),\n      }],\n      selected: null,\n      step_number: 0,\n      has_moved: null,\n      available_move: [],\n      visited:[],\n      must_choose: [],\n      computer_move: false,\n      move_log:[],\n      move_logback:[],\n      states:[],\n      is_moving: false,\n      was_capture: false,\n      status: null,\n      move_first:'human',\n      depth:3,\n      move_string: [],\n      history_turn: [{\n        boardState: [],\n        turn_id: 0,\n        human:'',\n        computer:'',\n      }],\n      turn_number: 0,\n    };\n    this.baseState = this.state;\n  }\n\n  restart_board = () => {\n    this.setState(this.baseState);\n  }\n\n  restart_board1 = () => {\n    this.setState({\n      history: [{\n        boardState: utils.create_board(173538815, 562399469895680),\n      }],\n      history_turn:[{\n        boardState: utils.create_board(173538815, 562399469895680),\n        turn_id: 0,\n        human:'',\n        computer:'',\n      }],\n      selected: null,\n      step_number: 0,\n      has_moved: null,\n      available_move: [],\n      must_choose:[],\n      status: null,\n      move_string: '',\n      turn_number: 0,\n      visited: [],\n      status: null,\n    });\n  }\n  \n  componentDidUpdate = () => {\n    if (this.state.computer_move) {\n      this.setState({is_moving: true});\n      this.wait_computer();\n      this.setState({computer_move: false, is_moving: false});\n      //console.log(this);\n    }\n  }\n\n\n  computer_turn(boardstate, was_capture, depth) {\n    let current_params = {'boardstate':boardstate, 'was_capture':was_capture, 'depth':depth};\n    let selected_list=[];\n    let states = [];\n    axios.post('/pass', current_params)\n    .then(res => {\n        let move_log = res.data[\"move_log\"];\n        let movedict = res.data['movedict'];\n        let selected;\n        let prev_selected = move_log[0];\n        for (var i=0; i<move_log.length; i++){\n          boardstate[prev_selected] = 'none';\n          selected = move_log[i];\n          boardstate[selected] = 'two';\n          boardstate = boardstate.map(function(item) { return item === 'none eaten' ? 'none' : item; });\n          var eaten = movedict[selected];\n          for (var j=0; j<eaten.length; j++){\n            boardstate[eaten[j]] = 'none eaten';\n          }\n          prev_selected = selected;\n          selected_list = selected_list.concat([prev_selected]);\n          states = states.concat([boardstate]);\n        }\n        this.setState({move_log: selected_list, move_logback:selected_list, states:states});\n        setTimeout(()=> {\n            this.iterate_move(selected_list, states);}, 1000);\n    })\n    .catch(err => {\n        alert(err);});\n    }\n  \n\n  iterate_move(move_log, states){\n    setTimeout(()=> {\n      let selected = move_log.shift();\n      let board = states.shift();\n      let visited = this.state.visited;\n      if (move_log.length === 0){\n        visited.push(selected);\n        this.resetState(board);\n        this.setState({computer_move: false, visited: []});\n        return\n      }\n      visited.push(selected);\n      this.setState({history: this.state.history.concat([{\n        boardState: board,}]), selected: selected, step_number: this.state.history.length-1, visited: visited});\n      this.iterate_move(move_log, states)\n    }, 500);\n  }\n\n  wait_computer(){\n    const board = this.getCurrentState();\n    var was_capture = this.state.was_capture;\n    var depth = this.state.depth;\n    this.computer_turn(board, was_capture, depth);\n  }\n\n\n  AImoves(){\n      const move_log = this.state.move_log;\n      const states = this.state.states;\n      this.iterate_move(move_log, states);\n  }\n\n\n  getCurrentState() {\n    var history = this.state.history;\n    var boardlist;\n    if (history.length > 1){\n      history = history.slice(0, this.state.step_number + 1);\n      boardlist = history[history.length - 1];\n    } else {\n      boardlist = history[0];\n    }\n    return boardlist.boardState;\n  }\n\n  AppendHistory(history) {\n    var history_turn = this.state.history_turn;\n    return history_turn.concat([history])\n  }\n\n\n  undo_move = () => {\n    let currTurn = this.state.turn_number;\n    if (currTurn <= 2){\n      this.restart_board();\n      return\n    }\n    let prev_step;\n    let unsetHistory, prev_hist_turn;\n    if (currTurn % 2 === 0){\n      prev_step = this.state.history_turn[currTurn-2].step_number;\n      unsetHistory = this.state.history.slice(0, prev_step+1);\n      prev_hist_turn = this.state.history_turn.slice(0, currTurn-1);\n      currTurn = currTurn-1;\n    } else{\n      prev_step = this.state.history_turn[currTurn-1].step_number;\n      prev_hist_turn = this.state.history_turn.slice(0, currTurn);\n      unsetHistory = this.state.history.slice(0, prev_step+1);\n    }\n    this.setState({\n        history: unsetHistory,\n        history_turn: prev_hist_turn,\n        selected: null,\n        available_move: [],\n        visited: [],\n        must_choose: [],\n        new_pos: null,\n        step_number: prev_step,\n        turn_number: currTurn-1\n    });\n  }\n\n\n  resetState = (newboard) => {\n    var visited = this.state.visited;\n    let move_string = utils.tomoveString(visited);\n    let turn = this.state.turn_number;\n    if (turn === 0){\n      let game_type;\n      switch(move_string){\n        case 'd5-c5':\n          game_type = 'vakyloha';\n          break;\n        case 'c4-c5':\n          if (newboard[27] === 'none eaten'){\n            game_type = 'kobana';\n          } else if (newboard[24] === 'none eaten'){\n            game_type = 'fohy';\n          }\n          break;\n        case 'd4-c5':\n          game_type = 'havanana';\n          break;\n        case 'd6-c5':\n          game_type = 'havia'; \n          break;\n      }\n      this.setState({game_type: game_type})\n      return\n    }\n    \n    var history_turn;\n    turn = turn + 1;\n    var history = {boardState: newboard, step_number: this.state.history.length, turn_id: turn, human:move_string, computer:''};\n    history_turn = this.AppendHistory(history);\n    \n    this.setState({history: this.state.history.concat([{\n      boardState: newboard, }]),\n    selected: null, \n    computer_move: false,\n    available_move: [],\n    visited: [],\n    has_moved: false,\n    must_choose: [],\n    step_number: this.state.history.length,\n    status: 'Computer is moving',\n    history_turn: history_turn ,\n    turn_number: turn,\n    });\n  }\n\n\n  pass_game = () => {\n    if (!(this.state.has_moved)){\n      return;\n    }\n    var visited = this.state.visited;\n    let move_string = utils.tomoveString(visited);\n    var turn = this.state.turn_number + 1;\n    var newboard = this.getCurrentState();\n    var history = {boardState: newboard, step_number: this.state.history.length, turn_id: turn, human:move_string, computer:''};\n\n    this.setState({was_capture: true, computer_move: true, \n      selected: null, status: 'Computer is moving',\n      available_move: [],\n      visited: [],\n      has_moved: false,\n      must_choose: [],\n      history_turn: this.AppendHistory(history),\n      turn_number: turn,\n    });\n  }\n\n  handle_game_type = (event) =>{\n    let game_type = event.target.value;\n    this.restart_board();\n    this.setState({history: [{\n      boardState: utils.get_board(game_type), \n      }],\n      history_turn: [{\n        boardState: utils.get_board(game_type),\n        turn_id: 0,\n        human:'',\n        computer:'',\n        game_type: game_type,\n        }],\n      status: 'human to move',\n    });\n  }\n\n  handle_move_first = (event) =>{\n    this.restart_board();\n    this.setState({move_first: event.target.value});\n  }\n  handle_depth = (event) =>{\n    this.setState({depth: event.target.value});\n  }\n\n\n  onClick = (i) => {\n    if (this.state.computer_move){\n      return\n    }\n    if (this.state.move_first === 'computer'){\n      if (!(this.state.status)){\n        alert('Choose Computer First Move [Game Type]');\n        return;\n      }\n    }\n    // previous selection must choose direction\n    var must_choose = this.state.must_choose;\n    const selected = this.state.selected;\n    const boardstate = this.getCurrentState();\n    var visited = this.state.visited;\n    var movetype, possible_move, newboard, must_capture;\n    var capture_backward, capture_forward, was_capture;\n    var has_moved = this.state.has_moved;\n    /* if no piece was selected:\n      - return if the next selected is not my_pieces\n      - else: check if the selected piece can move and return available move\n    */\n\n\n\n    if (must_choose.length > 1){\n      if (!(must_choose.includes(i))){\n        alert(\"You must choose between \"+utils.ToSquare(must_choose[0])+' and '+utils.ToSquare(must_choose[1]));\n        return\n      } else {\n        const new_pos = this.state.new_pos;\n        newboard = utils.makeMove_choosen(boardstate, selected, new_pos, i)\n        if (!(has_moved)){\n          visited.push(selected);\n        }\n        visited.push(new_pos);\n        possible_move = utils.legalMove(newboard, new_pos, visited, true);\n        if (possible_move.length  > 0){\n          this.setState({history: this.state.history.concat([{\n            boardState: newboard, currentPlayer: true,}]),\n            must_choose: [], \n            selected: new_pos,\n            visited: visited,\n            available_move: possible_move,\n            has_moved: true,\n            step_number: this.state.history.length,\n          });\n        return;\n        } else{\n          this.resetState(newboard);\n          this.setState({was_capture: true, selected: null, computer_move: true, visited: []});\n          return;\n        }\n      }\n    }\n\n    must_capture = utils.MustCapture(boardstate, this.state.has_moved);\n\n    const available_move = this.state.available_move;\n    \n    // if clicked the selected piece twice undo selection\n    if ((selected === i) && (!(has_moved))) {\n      this.setState({selected: null, available_move: []});\n      return;\n    }\n    if ((selected) && (boardstate[i] === 'one') && (!(has_moved))){\n      possible_move = utils.legalMove(boardstate, i, visited, must_capture);\n      if (possible_move.length > 0){\n        this.setState({selected: i, available_move: possible_move});\n      } else {\n       return\n      }\n    }\n\n    \n    /* No pieces selected */\n    if (!(selected) && (! (this.state.computer_move))){\n      if (boardstate[i] !== 'one'){\n        return\n      } else {\n        possible_move = utils.legalMove(boardstate, i, visited, must_capture);\n        // if it can move mark it as selected and show available move\n        if (possible_move.length > 0){\n           this.setState({selected: i, available_move: possible_move});\n        } else{\n          return\n        }\n      }\n    }\n\n\n    if (available_move.includes(i)){\n      movetype = i - selected;\n      // Check if both forward and backward direction are possible\n      capture_forward = selected + 2*movetype;\n      capture_backward = selected - movetype;\n\n      if ((boardstate[capture_forward] ==='two') && (boardstate[capture_backward] ==='two')){\n        this.setState({must_choose: [capture_forward, capture_backward], new_pos:i});\n        alert(\"Choose between \"+utils.ToSquare(capture_forward)+' and '+utils.ToSquare(capture_backward));\n        return\n      }\n\n      newboard = utils.makeMove(boardstate, selected, i, movetype);\n      if (!(has_moved)){\n        visited.push(selected);\n      }\n      visited.push(i);\n      \n      if (!must_capture){\n        this.resetState(newboard);\n        if (newboard.includes('none eaten')){\n          was_capture = true;\n        } else {\n          was_capture = false;\n        }\n        this.setState({was_capture: was_capture, computer_move: true, visited: []});\n        return;\n        // this.resetState(result.boardstate);\n      }\n\n      \n      possible_move = utils.legalMove(newboard, i, visited, must_capture);\n      if (possible_move.length>=1){\n        this.setState({history: this.state.history.concat([{\n          boardState: newboard, \n          currentPlayer: true,}]),\n        selected: i, \n        available_move: possible_move,\n        has_moved: true,\n        visited: visited,\n        must_choose: [],\n        step_number: this.state.history.length,});\n      } else{\n          this.resetState(newboard);\n          if (newboard.includes('none eaten')){\n            was_capture = true;\n          } else {\n            was_capture = false;\n          }\n          this.setState({was_capture: was_capture, computer_move: true, visited: []});\n          return;\n      }\n    }\n  }\n  \n\n  render() {\n    const boardstate = this.getCurrentState();\n    const selected = this.state.selected;\n    const available_move = this.state.available_move;\n    const must_choose = this.state.must_choose;\n    // const status = this.status;\n\n    if (this.state.turn_number >= 4){\n      const winner = utils.is_winner(boardstate);\n      if (winner){\n        alert(\"game over: \" + winner);\n        this.restart_board();\n      }\n    }\n  \n    let status;\n    if (this.state.is_moving){\n      status = 'Computer is moving...';\n    } else if (must_choose.length){\n      status = 'Choose: '+utils.ToSquare(must_choose[0])+' or '+utils.ToSquare(must_choose[1]);\n    } else if (selected){\n      status = 'Piece selected: '+utils.ToSquare(selected);\n    } else {\n      status = 'Human to move';\n    }\n    const hist_in = this.state.history_turn.slice(1);\n    let new_history = utils.getTurn(hist_in);\n    let disabled_game = this.state.move_first === 'human' ? true : false;\n\n    if (!boardstate){\n      this.restart_board();\n    }\n    return (\n      <div className='main'>\n        <Container fluid={true} id={'container1'}>\n          <Row noGutters={true}>\n            <Col xs={12} sm={12} md={8}>\n              <Form className='form_command'>\n                <Form.Row className=\"justify-content-md-center\"> \n                  <Form.Group as={Col} md=\"3\" xs=\"4\" controlId=\"opponent\">\n                    <Form.Label>Move First</Form.Label>\n                    <Form.Control value={this.state.move_first} as=\"select\" onChange={this.handle_move_first}>\n                        <option value=\"computer\">Computer</option>\n                        <option value=\"human\">Human</option>\n                    </Form.Control>\n                  </Form.Group>\n\n                  <Form.Group as={Col} md=\"3\"  xs=\"4\" controlId=\"move_first\">\n                    <Form.Label>Game Type</Form.Label>\n                    <Form.Control disabled={disabled_game}  value={this.state.game_type} as=\"select\" onChange={this.handle_game_type} >\n                      <option value=\"vakyloha\">Vaky loha</option>\n                      <option value=\"kobana\">Kobana</option>\n                      <option value=\"fohy\">Fohy</option>\n                      <option value=\"havia\">Havia</option>\n                      <option value=\"havanana\">Havanana</option>\n                    </Form.Control>\n                  </Form.Group>\n\n                  <Form.Group as={Col} md=\"3\"  xs=\"4\" controlId=\"depth\">\n                    <Form.Label>Depth</Form.Label>\n                    <Form.Control value={this.state.depth} as=\"select\"  onChange={this.handle_depth}>\n                      <option>1</option>\n                      <option>2</option>\n                      <option>3</option>\n                      <option>4</option>\n                      <option>5</option>\n                    </Form.Control>\n                  </Form.Group>\n                </Form.Row>\n              </Form>\n            </Col>\n          </Row>\n          <Row noGutters={true}>\n            <div className='windowa'>\n            <Row noGutters={true}> \n              <Col xs={12} sm={12} md={8}  className='game_windows row-eq-height'>\n                <div className='aspect_ratiodiv'>\n                  <Container fluid={true} className='BoardCont' >\n                      <Row noGutters={true} className=\"crosscont\"  >\n                        <div className='aspect_ratiodiv1'>\n                        <Board\n                          boardstate={boardstate}\n                          selected = {selected}\n                          available_move = {available_move}\n                          onClick={i => this.onClick(i)}\n                        />\n                        </div>\n                      </Row>\n                      <Row noGutters={true} className=\"command_button\" >\n                          <Col style={{ textAlign: \"center\" }}>\n                            <button  className=\"game_button\"  onClick={() => this.restart_board()}>Restart</button>\n                          </Col>\n                          <Col style={{ textAlign: \"center\" }}>\n                            <button  className=\"game_button\"   onClick={() => this.pass_game()}>Pass</button>\n                          </Col>\n                          <Col style={{ textAlign: \"center\" }}>\n                            <button  className=\"game_button\"   onClick={() => this.undo_move()}>Undo</button>   \n                          </Col>\n                      </Row>\n                      \n                  </Container>\n                </div>\n              </Col>\n              <Col xs={12} sm={12} md={4} className=\"status_window row-eq-height\">\n                <MoveStatus \n                  status={status} move_string={new_history}\n                  //move_table={move_table}\n                />\n              </Col>\n            </Row>\n            </div>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n};\n\n\nconst Stones = (props) => {\n  const id = props.id;\n  const idbox = utils.ToSquare(id);\n  const selected = props.selected;\n  const available = props.available;\n  var classname = \"player-\"+props.stoneClasses +' '+idbox;\n  if (id === selected){\n    classname = classname + '  selected';\n  }\n  if (available.indexOf(id) > -1) {\n    classname = classname + '  available';\n  }  \n  return (\n      <div className={classname}  id={id} onClick={props.onClick}>\n      </div>\n  );\n}\n\n\n\nclass MoveStatus extends React.Component {\n  renderTableData() {\n    const move_str = this.props.move_string;\n    // console.log('movestring');\n    // console.log(move_str);\n    return move_str.map((history, index) => {\n        const {turn, human, computer } = history //destructuring\n        return (\n          <tr key={turn}>\n             <td style={{textAlign:'center'}}>{turn}</td>\n             <td>{human}</td>\n             <td>{computer}</td>\n          </tr>\n        )\n    })\n }\n  render(){\n    const status = this.props.status;\n    return (\n      <div className=\"box_status\">\n      <Container fluid={true} className=\"status_show\">\n        {/* <Row noGutters={true} style={{fontWeight: 'bold'}}>Game Status</Row> */}\n        <h3>Game Status</h3>\n        <Row noGutters={true} className=\"game_status\">\n          <Col className=\"col-centered\" id=\"log_status\" >\n            <div className=\"center-me\" id=\"statusbox\"> {status}\n            </div>\n          </Col>\n        </Row>\n        {/* <Row noGutters={true} style={{fontWeight: 'bold'}}> Moves</Row>  */}\n        <h3>Moves</h3>\n        <Row noGutters={true} className=\"moves_log\">\n          <Col className=\"moves_tables\">\n            <div id=\"statusall\">\n              <table id='moves' style={{width:'100%'}}>\n                <thead>\n                <tr style={{borderBottom:'1px dashed', borderCollapse:'collapse'}}>\n                    <th width=\"20%\" style={{textAlign:'center'}}>ID</th>\n                    <th width=\"40%\">Human</th>\n                    <th width=\"40%\">Computer</th>\n                  </tr>\n                </thead>\n                <tbody>\n                    {this.renderTableData()}\n                </tbody>\n              </table>\n            </div>\n          </Col>\n        </Row>              \n      </Container>\n    </div>\n    )\n}\n}\n\n\n\nclass Board extends React.Component {\n  RenderStones = (i) => {\n    const stone = this.props.boardstate[i];\n    const selected = this.props.selected;\n    const available = this.props.available_move;\n    return (\n      <Stones stoneClasses={stone} id={i} selected={selected}  available={available} onClick={() => this.props.onClick(i)}\n      />\n  );\n  }\n  render() {\n    return (\n      <div className=\"rowcross\" >\n        <div className='crossed'>\n          {this.RenderStones(49)}\n          {this.RenderStones(48)}\n          {this.RenderStones(39)}\n          {this.RenderStones(38)}\n          </div>\n        <div className='crossed'>\n          {this.RenderStones(47)}\n          {this.RenderStones(46)}\n          {this.RenderStones(37)}\n          {this.RenderStones(36)}\n          </div>\n        <div className='crossed'>\n          {this.RenderStones(45)}\n          {this.RenderStones(44)}\n          {this.RenderStones(35)}\n          {this.RenderStones(34)}\n          </div>\n        <div className='crossed_left'>\n          {this.RenderStones(43)}\n          {this.RenderStones(42)}\n          {this.RenderStones(41)}\n          {this.RenderStones(33)}\n          {this.RenderStones(32)}\n          {this.RenderStones(31)}\n          </div>\n        <div className='crossed_bottom'>\n          {this.RenderStones(29)}\n          {this.RenderStones(28)}\n          {this.RenderStones(19)}\n          {this.RenderStones(18)}\n          {this.RenderStones(9)}\n          {this.RenderStones(8)}\n          </div>\n        <div className='crossed_bottom'> \n          {this.RenderStones(27)}\n          {this.RenderStones(26)}\n          {this.RenderStones(17)}\n          {this.RenderStones(16)} \n          {this.RenderStones(7)}\n          {this.RenderStones(6)}                  \n          </div>\n        <div className='crossed_bottom'>\n          {this.RenderStones(25)}\n          {this.RenderStones(24)}\n          {this.RenderStones(15)}\n          {this.RenderStones(14)}\n          {this.RenderStones(5)}\n          {this.RenderStones(4)}          \n          </div>\n        <div className='crossed_bottom_left'>\n          {this.RenderStones(23)}\n          {this.RenderStones(22)}\n          {this.RenderStones(21)}\n          {this.RenderStones(13)}\n          {this.RenderStones(12)}\n          {this.RenderStones(11)}\n          {this.RenderStones(3)}\n          {this.RenderStones(2)}\n          {this.RenderStones(1)}\n          </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}